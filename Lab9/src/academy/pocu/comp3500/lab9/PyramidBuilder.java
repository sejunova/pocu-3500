package academy.pocu.comp3500.lab9;

import java.util.Arrays;

public class PyramidBuilder {
    public static int findMaxHeight(final int[] widths, int statue) {
//        List<String> debugger = new ArrayList<>();

        int level = 0;
        int prevLevelCount = 1;
        int prevLevelWidthSum = statue;
        int curLevelCount = 0;
        int curLevelWidthSum = 0;

        Arrays.sort(widths);
//        StringJoiner stringBuilder = new StringJoiner(", ");
        for (int width : widths) {
//            stringBuilder.add(String.format("%d", width));
            curLevelCount++;
            curLevelWidthSum += width;

            if (curLevelCount > prevLevelCount && curLevelWidthSum > prevLevelWidthSum) {
//                debugger.add(stringBuilder.toString());
//                stringBuilder = new StringJoiner(", ");

                level++;
                prevLevelCount = curLevelCount;
                prevLevelWidthSum = curLevelWidthSum;
                curLevelCount = 0;
                curLevelWidthSum = 0;
            }
        }
//        System.out.println(String.join("\n", debugger));
        return level;
    }

    public static void main(String[] args) {
//        int p = PyramidBuilder.findMaxHeight(new int[]{
//                8, 8, 8, 12, 24, 25, 26, 26, 27, 28, 29, 30, 32, 33, 34, 44, 45, 46, 46, 48, 49, 50, 55, 58, 59, 60, 62, 65, 66, 72, 72, 75, 76, 77, 79, 83, 86, 89, 91, 92, 92, 94, 95, 98, 99, 101, 102, 103, 107, 108, 109, 111, 112, 115, 116, 117, 118, 120, 121, 122, 124, 130, 131, 133, 140, 141, 141, 141, 144, 146, 147, 148, 148, 151, 151, 153, 155, 159, 159, 160, 163, 167, 173, 177, 178, 180, 182, 187, 189, 190, 191, 193, 196, 199, 200, 204, 218, 226, 226, 230, 230, 231, 232, 236, 237, 240, 240, 242, 242, 249, 250, 253, 257, 259, 261, 264, 266, 266, 267, 267, 269, 271, 274, 275, 279, 279, 280, 280, 281, 283, 285, 286, 288, 293, 294, 298, 301, 306, 307, 308, 309, 311, 313, 316, 316, 317, 318, 320, 324, 325, 326, 326, 327, 329, 331, 331, 333, 343, 350, 352, 354, 355, 361, 361, 364, 371, 378, 378, 378, 381, 386, 387, 388, 388, 388, 398, 401, 404, 404, 408, 408, 408, 409, 412, 418, 420, 421, 422, 423, 425, 425, 425, 427, 427, 428, 431, 431, 432, 434, 438, 441, 443, 447, 448, 451, 453, 456, 458, 458, 458, 458, 460, 461, 461, 461, 462, 462, 467, 468, 471, 471, 472, 475, 477, 479, 481, 483, 485, 488, 488, 489, 495, 500, 501, 501, 501, 502, 503, 505, 508, 513, 514, 517, 518, 521, 522, 523, 525, 526, 527, 531, 531, 533, 535, 536, 538, 540, 540, 542, 543, 547, 548, 551, 553, 553, 555, 567, 567, 568, 570, 570, 573, 577, 581, 582, 583, 584, 586, 586, 588, 590, 591, 593, 594, 594, 594, 594, 595, 595, 596, 597, 600, 603, 603, 603, 606, 607, 608, 616, 619, 621, 625, 627, 627, 627, 627, 628, 628, 631, 631, 631, 631, 635, 635, 635, 638, 639, 640, 646, 646, 649, 653, 656, 659, 659, 661, 663, 667, 673, 677, 682, 683, 684, 686, 692, 693, 694, 696, 704, 707, 708, 709, 709, 710, 712, 716, 717, 724, 725, 728, 731, 732, 733, 734, 734, 735, 736, 737, 737, 738, 738, 739, 741, 744, 744, 748, 751, 753, 755, 756, 756, 760, 762, 764, 766, 774, 774, 776, 781, 782, 783, 784, 785, 794, 794, 796, 798, 801, 802, 804, 806, 810, 811, 811, 812, 813, 816, 817, 819, 820, 823, 826, 827, 828, 828, 829, 830, 834, 834, 835, 836, 837, 837, 840, 841, 842, 843, 843, 845, 845, 846, 848, 855, 856, 857, 858, 859, 862, 862, 868, 871, 872, 873, 874, 876, 877, 885, 889, 890, 895, 896, 897, 898, 900, 902, 904, 905, 907, 907, 909, 909, 912, 913, 917, 917, 918, 919, 919, 920, 921, 924, 925, 925, 933, 935, 936, 945, 946, 946, 947, 947, 949, 951, 953, 953, 955, 956, 960, 962, 962, 965, 965, 966, 969, 972, 974, 979, 980, 981, 982, 983, 983, 987, 988, 991, 991, 992, 992, 997, 997,
//        }, 900);
        int p = PyramidBuilder.findMaxHeight(new int[]{3, 3, 4, 4, 30, 12, 10, 10, 6}, 5);
        System.out.println(p);

    }
}